// src/cart/cart.service.ts
import { injectable } from 'tsyringe';
import { WebCartService } from './web-cart.service';
import { MobileCartService } from './mobile-cart.service';
import { RequestContextChannelResolver } from './channel-resolver';
import { Channel } from './channel';
import { AddToCartRequest, AddToCartResponse } from '../domain/models/request/addToCart.model';
import { GetCartResponse } from '../domain/models/getCart.model';

export interface ICartService {
  getCart(): Promise<GetCartResponse>;
  addItemsToCart(cartResourceId: string, req: AddToCartRequest): Promise<AddToCartResponse>;
}

/**
 * Delegates to WebCartService or MobileCartService based on RequestContext.channel.
 */
@injectable()
export class CartService implements ICartService {
  private readonly map: Map<Channel, ICartService>;

  constructor(
    private readonly resolver: RequestContextChannelResolver,
    private readonly web: WebCartService,
    private readonly mobile: MobileCartService
  ) {
    this.map = new Map<Channel, ICartService>([
      [Channel.WEB, this.web],
      [Channel.MOBILE, this.mobile],
    ]);
  }

  private pick(): ICartService {
    const channel = this.resolver.current();
    return this.map.get(channel) ?? this.web;
  }

  getCart(): Promise<GetCartResponse> {
    return this.pick().getCart();
  }

  addItemsToCart(cartResourceId: string, req: AddToCartRequest): Promise<AddToCartResponse> {
    return this.pick().addItemsToCart(cartResourceId, req);
  }
}
import React, { useState } from "react";
import { Chat, Message, User } from "@progress/kendo-react-conversational-ui";
import { Grid, GridColumn } from "@progress/kendo-react-grid";
import { Button } from "@progress/kendo-react-buttons";
import { Loader } from "@progress/kendo-react-indicators";
import { AiOutlineMessage, AiOutlineClose } from "react-icons/ai";
import { useStyles } from "./chat.styles";

interface ChatMessage {
  author: User;
  text: string;
  typingIndicator?: boolean;
}

const user: User = { id: 1, name: "User" };
const bot: User = { id: 2, name: "Formulary AI Bot" };

const ChatBot: React.FC = () => {
  const classes = useStyles();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [results, setResults] = useState<any[]>([]);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isTyping, setIsTyping] = useState<boolean>(false);

  const toggleChat = () => setIsOpen(!isOpen);

  const sendMessage = async (event: any) => {
    const userMessage: ChatMessage = { author: user, text: event.message.text };
    setMessages((prev) => [...prev, userMessage]);

    // Show Kendo Loader inside chat
    setIsTyping(true);
    setMessages((prev) => [
      ...prev,
      { author: bot, text: "", typingIndicator: true }, // Placeholder typing message with Loader
    ]);

    try {
      const response = await fetch("http://localhost:8000/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: event.message.text }),
      });

      const data = await response.json();

      // Remove loader message
      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);

      if (data.results) {
        setResults(data.results);
        const botMessage: ChatMessage = { author: bot, text: "Here are your search results:" };
        setMessages((prev) => [...prev, botMessage]);
      } else if (data.response) {
        const botMessage: ChatMessage = { author: bot, text: data.response };
        setMessages((prev) => [...prev, botMessage]);
      } else {
        const botMessage: ChatMessage = { author: bot, text: "Sorry, I didn't understand your query." };
        setMessages((prev) => [...prev, botMessage]);
      }
    } catch (error) {
      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);

      console.error("Error:", error);
      const botMessage: ChatMessage = { author: bot, text: "An error occurred. Please try again later." };
      setMessages((prev) => [...prev, botMessage]);
    }
  };

  // Custom renderer for messages, adding Loader when bot is typing
  const customMessageRenderer = (props: any) => {
    const message = props.item;

    if (message.typingIndicator) {
      return (
        <div className={classes.typingLoader}>
          <Loader size="small" type="pulsing" />
        </div>
      );
    }

    return <Message {...props} />;
  };

  return (
    <div>
      {/* Floating Chat Icon */}
      {!isOpen && (
        <div className={classes.chatIcon} onClick={toggleChat}>
          <AiOutlineMessage size={32} />
        </div>
      )}

      {/* Chat Container */}
      {isOpen && (
        <div className={classes.chatContainer}>
          <div className={classes.chatHeader}>
            <span>Formulary AI Bot</span>
            <Button onClick={toggleChat} className={classes.closeButton}>
              <AiOutlineClose size={20} />
            </Button>
          </div>

          <Chat
            messages={messages}
            onMessageSend={sendMessage}
            user={user}
            placeholder="Ask about formulary..."
            messageTemplate={customMessageRenderer} // Custom renderer for loader
          />

          {/* Display OpenSearch Results */}
          {results.length > 0 && (
            <div className={classes.resultsContainer}>
              <h4>Search Results</h4>
              <Grid data={results}>
                <GridColumn field="id" title="ID" width="100px" />
                <GridColumn field="formulary_name" title="Formulary Name" width="200px" />
                <GridColumn field="wac_amount" title="WAC Amount" width="150px" />
              </Grid>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ChatBot;

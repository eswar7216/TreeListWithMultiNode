import { renderHook } from '@testing-library/react-hooks';
import useCoBrandCssLoader from './useCoBrandCssLoader';
import loadResources from './loadResources';

// Mock loadResources module
jest.mock('./loadResources', () => ({
  loadCss: jest.fn(),
}));

describe('useCoBrandCssLoader', () => {
  beforeEach(() => {
    // Clear all instances and calls to constructor and all methods:
    loadResources.loadCss.mockClear();
  });

  it('should call loadResources.loadCss with the correct URL when Evernorth migration is enabled', async () => {
    const coBrandCssUrl = '/css/another/another.css';
    const isEvernorthMigrationEnabled = true;

    // Render the hook
    renderHook(() => useCoBrandCssLoader(coBrandCssUrl, isEvernorthMigrationEnabled));

    // Wait for the async useEffect to complete
    await new Promise(process.nextTick);

    // Check that loadResources.loadCss was called with the Evernorth URL
    expect(loadResources.loadCss).toHaveBeenCalledWith('/css/cobrand/cobrand.css', false, false, true);
    // Check that loadResources.loadCss was called with the coBrandCssUrl
    expect(loadResources.loadCss).toHaveBeenCalledWith(coBrandCssUrl, false, true, false);
  });

  it('should call loadResources.loadCss with the PBM URL when Evernorth migration is not enabled', async () => {
    const coBrandCssUrl = '/css/another/another.css';
    const isEvernorthMigrationEnabled = false;

    // Render the hook
    renderHook(() => useCoBrandCssLoader(coBrandCssUrl, isEvernorthMigrationEnabled));

    // Wait for the async useEffect to complete
    await new Promise(process.nextTick);

    // Check that loadResources.loadCss was called with the PBM URL
    expect(loadResources.loadCss).toHaveBeenCalledWith('/css/cobrand/cobrand_pbm.css', false, false, true);
    // Check that loadResources.loadCss was called with the coBrandCssUrl
    expect(loadResources.loadCss).toHaveBeenCalledWith(coBrandCssUrl, false, true, false);
  });

  it('should handle exceptions without crashing', async () => {
    const coBrandCssUrl = '/css/another/another.css';
    const isEvernorthMigrationEnabled = true;

    // Make loadResources.loadCss throw an error
    loadResources.loadCss.mockImplementationOnce(() => Promise.reject(new Error('Failed to load')));

    // Render the hook
    renderHook(() => useCoBrandCssLoader(coBrandCssUrl, isEvernorthMigrationEnabled));

    // Wait for the async useEffect to complete
    await new Promise(process.nextTick);

    // Check that loadResources.loadCss was called with the Evernorth URL
    expect(loadResources.loadCss).toHaveBeenCalledWith('/css/cobrand/cobrand.css', false, false, true);
    // Check that loadResources.loadCss was called with the coBrandCssUrl
    expect(loadResources.loadCss).toHaveBeenCalledWith(coBrandCssUrl, false, true, false);
  });
});

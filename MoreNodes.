public List<HierarchyRule> criteriaBuilder(
    FindRuleExceptionsForHierarchyRequest request, 
    long timeRemaining, 
    long timeLineHold, 
    Date effDate, 
    Date endDate, 
    String hierarchyLevel, 
    Long hierarchyId
) {
    // Get the CriteriaBuilder from session
    CriteriaBuilder cb = currentSession().getCriteriaBuilder();

    // Main CriteriaQuery for HierarchyRule
    CriteriaQuery<HierarchyRule> cq = cb.createQuery(HierarchyRule.class);
    Root<HierarchyRule> root = cq.from(HierarchyRule.class);

    // Subquery for the provided hierarchy level (e.g., orgHierarchy, carrierHierarchy, etc.)
    Subquery<Long> subquery = cq.subquery(Long.class);
    Root<HierarchyTimelines> subRoot = subquery.from(HierarchyTimelines.class);

    // Dynamically select the hierarchy field based on the hierarchyLevel input
    switch (hierarchyLevel) {
        case "orgHierarchy":
            subquery.select(subRoot.get("orgHierarchy").get("hierarchyId"));
            break;
        case "carrierHierarchy":
            subquery.select(subRoot.get("carrierHierarchy").get("hierarchyId"));
            break;
        case "contractHierarchy":
            subquery.select(subRoot.get("contractHierarchy").get("hierarchyId"));
            break;
        case "benefitPlanHierarchy":
            subquery.select(subRoot.get("benefitPlanHierarchy").get("hierarchyId"));
            break;
        case "groupHierarchy":
            subquery.select(subRoot.get("groupHierarchy").get("hierarchyId"));
            break;
        default:
            throw new IllegalArgumentException("Invalid hierarchy level: " + hierarchyLevel);
    }

    // Apply restriction on the hierarchy level
    subquery.where(cb.equal(subRoot.get(hierarchyLevel).get("hierarchyId"), hierarchyId));

    // Add subquery to the main CriteriaQuery
    cq.where(cb.in(root.get("hierarchy").get("hierarchyId")).value(subquery));

    // Execute the query and return the results
    return session.createQuery(cq).getResultList();
}

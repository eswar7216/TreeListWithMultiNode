The issue occurs because **`query_valid_options` expects an entity type like "formulary", "year", or "drug"**, but the **LLM is not correctly extracting the entity** from the user's question. Instead, it's returning the full question as the entity.

To **fix this**, we need to **improve the LLM's ability to extract the correct entity type** by refining the `context_prompt` and modifying how `query_valid_options` is used.

---

## **üîπ Fixing the Entity Extraction Issue**
### **1Ô∏è‚É£ Updates to `context_prompt` (Better Entity Extraction)**
Modify `prompts.yaml` so that the LLM extracts **correct entity types** (`formulary_name`, `year`, `brand_name`) instead of the full question.

```yaml
prompts:
  context_prompt: |
    You are an AI assistant that determines the intent of a user query.
    
    **Your response must be in JSON format and include a "context" key.**
    
    - If the user is greeting (e.g., "Hello", "Hi", "Hey"), respond:
      {
        "context": "greeting"
      }

    - If the user is asking a general NLP question (e.g., "How does formulary placement work?", "What is WAC?", "Tell me about Express Scripts"), respond:
      {
        "context": "nlp",
        "message": "Formulary placement determines where a drug is listed in an insurance plan. Would you like to ask about a specific formulary?"
      }

    - If the user is asking about a formulary search (e.g., "What is the WAC for Lipitor?"), extract **only the relevant entities** and return:
      {
        "context": "formulary_search",
        "entity_type": "formulary_name",
        "entity_value": "Express Scripts",
        "tool": "query_total_wac",
        "parameters": {
          "formulary_name": "Express Scripts",
          "year": "2023",
          "brand_name": "Lipitor"
        },
        "missing_parameters": ["year"]  // If missing details
      }

    - If the query is unclear, respond:
      {
        "context": "unknown",
        "message": "I'm not sure I understood your request. Can you clarify?"
      }

    **Always return JSON. Never return plain text.**
```
‚úÖ **What changed?**
- Instead of `"entity": "<extracted entity>"`, it now returns:
  - `"entity_type": "<formulary_name | year | brand_name>"`
  - `"entity_value": "<Express Scripts | 2023 | Lipitor>"`

---

### **2Ô∏è‚É£ Fixing `process_query()` in `ai_gateway.py`**
We now **extract `entity_type` and `entity_value` separately** and **use them properly** when querying OpenSearch.

```python
async def process_query(user_query, history):
    """
    Determines the context of the query before deciding whether to:
    - Process an NLP question
    - Query OpenSearch for exact/fuzzy matches
    - Perform a follow-up if necessary
    - Handle greetings properly
    """
    
    # Step 1: Determine query intent
    context_result = await derive_context(user_query, history)
    context = context_result.get("context")

    # Handle Greetings
    if context == "greeting":
        return {
            "response_type": "message",
            "message": {
                "text": "Hello! How can I assist you today?",
                "context": "greeting"
            }
        }

    # Handle General NLP Queries
    if context == "nlp":
        return {
            "response_type": "message",
            "message": {
                "text": context_result["message"],
                "context": "info"
            }
        }

    # Handle Formulary Search Queries
    if context == "formulary_search":
        entity_type = context_result.get("entity_type")  # Extract entity type (formulary_name, year, brand_name)
        entity_value = context_result.get("entity_value")  # Extract actual value

        if not entity_type or not entity_value:
            return {
                "response_type": "message",
                "message": {
                    "text": "I couldn't determine the entity in your request.",
                    "context": "error"
                }
            }

        # Step 2: Check OpenSearch for exact match using the correct entity type
        exact_match = await query_valid_options(entity_type)

        if not exact_match:  # No exact match, try fuzzy search
            fuzzy_matches = await query_did_you_mean(entity_value)
            
            if fuzzy_matches:
                return {
                    "response_type": "did_you_mean",
                    "did_you_mean": {
                        "question": "Did you mean one of these?",
                        "options": fuzzy_matches
                    }
                }

        # Step 3: If an exact match exists, check if follow-up is needed
        missing_parameters = context_result.get("missing_parameters", [])

        if missing_parameters:
            options = await query_valid_options(missing_parameters[0])
            return {
                "response_type": "follow_up",
                "follow_up": {
                    "question": f"Could you provide {missing_parameters[0]}?",
                    "options": options
                }
            }

        # Step 4: If everything is provided, generate tool_calls
        return {
            "response_type": "tool_calls",
            "tool_calls": [
                {
                    "tool": context_result["tool"],
                    "parameters": context_result["parameters"]
                }
            ]
        }

    # Handle Unknown Queries
    if context == "unknown":
        return {
            "response_type": "message",
            "message": {
                "text": context_result["message"],
                "context": "error"
            }
        }

    # Default error handling
    return {
        "response_type": "message",
        "message": {
            "text": "I couldn't determine your request. Please clarify.",
            "context": "error"
        }
    }
```

---

### **3Ô∏è‚É£ Fixing `query_valid_options()` in `opensearch.py`**
Right now, `query_valid_options()` is failing because it's getting an **incorrect `option_type`** (the entire user question instead of "formulary" or "year").

#### **‚úÖ Fix it by making it accept `"entity_type"` instead**
```python
async def query_valid_options(entity_type):
    """
    Fetches valid options (formulary names, years, or drugs) from OpenSearch.
    Used for "follow_up" questions when details are missing.
    """
    query = {}

    if entity_type == "formulary_name":
        query = {
            "size": 1000,
            "_source": ["formulary_name"],
            "query": {"match_all": {}}
        }
    elif entity_type == "year":
        query = {
            "size": 1000,
            "_source": ["invoice_yr"],
            "query": {"match_all": {}}
        }
    elif entity_type == "brand_name":
        query = {
            "size": 1000,
            "_source": ["brand_name"],
            "query": {"match_all": {}}
        }
    else:
        return []

    try:
        response = requests.post(OPENSEARCH_URL, json=query)
        
        if response.status_code == 200:
            data = response.json()
            hits = data.get("hits", {}).get("hits", [])
            options = list(set(hit["_source"][entity_type] for hit in hits if entity_type in hit["_source"]))
            return sorted(options)  # Returning sorted list of unique options
        else:
            logger.error(f"OpenSearch returned an error: {response.status_code}")
            return []

    except Exception as e:
        logger.error(f"Error querying OpenSearch: {str(e)}")
        return []
```

---

## **‚úÖ Expected Behavior After Fixes**
### **Before (Incorrect Behavior)**
üë§ **User**: *"What is the WAC for Lipitor under Express Scripts?"*  
‚ùå **LLM Response**:  
```json
{
  "context": "formulary_search",
  "entity": "What is the WAC for Lipitor under Express Scripts?"
}
```
üö® **Problem:** `"entity"` is the entire user question!

---

### **After Fix (Correct Behavior)**
üë§ **User**: *"What is the WAC for Lipitor under Express Scripts?"*  
‚úÖ **LLM Response**:  
```json
{
  "context": "formulary_search",
  "entity_type": "formulary_name",
  "entity_value": "Express Scripts"
}
```
üéØ **Fix:** Now, `entity_type` is `"formulary_name"` and `entity_value` is `"Express Scripts"`, so OpenSearch queries work correctly.

---

## **üöÄ Summary of Fixes**
‚úî **LLM now correctly extracts `"entity_type"` and `"entity_value"`**  
‚úî **Fixed `query_valid_options()` to use `"entity_type"` instead of full user question**  
‚úî **Ensured bot properly queries OpenSearch for `"follow_up"` and `"did_you_mean"`**  
‚úî **Prevents bot from returning empty lists when checking OpenSearch**  

üöÄ **Now the bot correctly understands user queries!** Let me know if you need further refinements! üéØ

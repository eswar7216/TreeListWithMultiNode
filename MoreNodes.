To support the **two response scenarios**:
1. **Follow-Up Questions** â†’ Show follow-up question with selectable options.  
2. **NLP Response (Message)** â†’ Show bot response as a standard message.  

---

### **âœ… Key Updates**
1. **Parses `response_type` from API response.**  
2. **Handles `follow_up` by displaying options as selectable buttons.**  
3. **Handles `message` by displaying the text normally.**  

---

## **ðŸ“Œ Updated `ChatBot.tsx`**
```tsx
import React, { useState } from "react";
import { Chat, User, MessageAttachments, Message as KendoMessage } from "@progress/kendo-react-conversational-ui";
import { Grid, GridColumn } from "@progress/kendo-react-grid";
import { Button } from "@progress/kendo-react-buttons";
import { Loader } from "@progress/kendo-react-indicators";
import { AiOutlineMessage, AiOutlineClose } from "react-icons/ai";
import { useStyles } from "./chat.styles";
import type { MessageProps } from "@progress/kendo-react-conversational-ui";

interface ChatMessage {
  author: User;
  text: string;
  responseType?: "message" | "follow_up";
  followUpOptions?: string[];
}

interface ApiResponse {
  response_type: "message" | "follow_up";
  message?: { text: string; context?: string };
  follow_up?: { question: string; options: string[] };
}

const user: User = { id: 1, name: "User", avatarUrl: "https://via.placeholder.com/40" };
const bot: User = { id: 2, name: "Bot", avatarUrl: "" };

const initialMessages: ChatMessage[] = [
  { author: bot, text: "**Hello!** I am your AI assistant. ðŸ¤–" },
  { author: bot, text: "Ask me about **formulary details**, WAC amounts, and placement." },
];

const ChatBot: React.FC = () => {
  const classes = useStyles();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isTyping, setIsTyping] = useState<boolean>(false);

  const toggleChat = () => {
    setIsOpen(!isOpen);
    if (!isOpen && messages.length === 0) {
      setMessages(initialMessages);
    }
  };

  const sendMessage = async (event: any) => {
    const userMessage: ChatMessage = { author: user, text: event.message.text };
    setMessages((prev) => [...prev, userMessage]);

    setIsTyping(true);
    setMessages((prev) => [...prev, { author: bot, text: "", responseType: "message" }]);

    try {
      const response = await fetch("http://localhost:8000/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: event.message.text }),
      });

      const data: ApiResponse = await response.json();
      setIsTyping(false);

      if (data.response_type === "follow_up" && data.follow_up) {
        const followUpMessage: ChatMessage = {
          author: bot,
          text: data.follow_up.question,
          responseType: "follow_up",
          followUpOptions: data.follow_up.options,
        };
        setMessages((prev) => [...prev, followUpMessage]);
      } else if (data.response_type === "message" && data.message) {
        const botMessage: ChatMessage = { author: bot, text: data.message.text };
        setMessages((prev) => [...prev, botMessage]);
      } else {
        setMessages((prev) => [...prev, { author: bot, text: "Sorry, I couldn't process that request." }]);
      }
    } catch (error) {
      setIsTyping(false);
      setMessages((prev) => [...prev, { author: bot, text: "An error occurred. Please try again later." }]);
    }
  };

  const handleFollowUpSelection = (option: string) => {
    sendMessage({ message: { text: option } });
  };

  // Custom renderer for messages
  const customMessageRenderer = (props: MessageProps) => {
    const message = props.item as ChatMessage;
    const isUser = message.author.id === user.id;

    return (
      <div className={`${classes.messageWrapper} ${isUser ? classes.userMessageWrapper : classes.botMessageWrapper}`}>
        {message.author.avatarUrl ? (
          <img src={message.author.avatarUrl} alt={message.author.name} className={classes.avatar} />
        ) : (
          <div className={classes.avatar}>{message.author.name[0]}</div>
        )}

        <div className={classes.messageBubble}>
          {message.text}
          {message.responseType === "follow_up" && message.followUpOptions && (
            <div className={classes.followUpOptions}>
              {message.followUpOptions.map((option, index) => (
                <button key={index} className={classes.followUpButton} onClick={() => handleFollowUpSelection(option)}>
                  {option}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div>
      {!isOpen && (
        <div className={classes.chatIcon} onClick={toggleChat}>
          <AiOutlineMessage size={32} />
        </div>
      )}

      {isOpen && (
        <div className={classes.chatContainer}>
          <div className={classes.chatHeader}>
            <span>Formulary AI Bot</span>
            <Button onClick={toggleChat} className={classes.closeButton}>
              <AiOutlineClose size={20} />
            </Button>
          </div>

          <Chat
            messages={messages}
            onMessageSend={sendMessage}
            user={user}
            placeholder="Ask about formulary..."
            messageTemplate={customMessageRenderer}
          />
        </div>
      )}
    </div>
  );
};

export default ChatBot;
```

---

## **ðŸ“Œ Update `chat.styles.ts` for Follow-Up Options**
```tsx
import { makeStyles } from "@mui/styles";

export const useStyles = makeStyles({
  messageWrapper: {
    display: "flex",
    alignItems: "center",
    marginBottom: "10px",
  },

  userMessageWrapper: {
    flexDirection: "row-reverse",
  },

  botMessageWrapper: {
    flexDirection: "row",
  },

  avatar: {
    width: "40px",
    height: "40px",
    borderRadius: "50%",
    objectFit: "cover",
    background: "#0078d4",
    color: "white",
    fontSize: "16px",
    fontWeight: "bold",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    marginRight: "10px",
  },

  messageBubble: {
    padding: "10px 14px",
    borderRadius: "18px",
    fontSize: "15px",
    maxWidth: "80%",
    wordBreak: "break-word",
    background: "#f3f3f3",
    color: "#333",
    boxShadow: "0px 2px 5px rgba(0, 0, 0, 0.1)",
  },

  followUpOptions: {
    marginTop: "8px",
    display: "flex",
    flexDirection: "column",
    gap: "5px",
  },

  followUpButton: {
    background: "#0078d4",
    color: "white",
    padding: "6px 12px",
    borderRadius: "12px",
    border: "none",
    cursor: "pointer",
    fontSize: "14px",
    "&:hover": {
      background: "#005ea6",
    },
  },
});
```

---

## **ðŸš€ Now Your Chatbot Supports**
âœ… **Follow-Up Questions with Clickable Options**  
âœ… **Standard Bot Messages**  
âœ… **Looks Clean & Professional**  

---

### **ðŸŽ¯ Final Outcome**
âœ” **User asks:** "What are the drugs under Express Scripts?"  
âœ” **Bot Responds with Follow-Up:** "For which year do you need the drug list?" with options **2022, 2023, 2024**  
âœ” **User clicks 2023 â†’ Chat continues!**  

ðŸš€ **Your chatbot is now interactive and intelligent!** Let me know if you need more refinements. ðŸ˜ŠðŸ”¥

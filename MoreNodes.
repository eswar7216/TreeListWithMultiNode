# Formulary Search AI - Complete Code with `tool_calls` and Local Mode

# ========================
# Directory: src/main.py
# ========================

from fastapi import FastAPI
from api.routes import router

app = FastAPI()
app.include_router(router)

@app.get("/")
def read_root():
    return {"message": "Formulary Search AI is running!"}

# ========================
# Directory: src/api/routes.py
# ========================

from fastapi import APIRouter, HTTPException
from models.query_model import QueryRequest
from services.ai_gateway import process_query
from services.opensearch import query_opensearch
from services.local_data import query_local_json
import os

router = APIRouter()

# Function to execute tool calls dynamically
def execute_tool_calls(tool_calls):
    results = []
    for tool_call in tool_calls:
        if tool_call["tool"] == "query_formulary":
            formulary_name = tool_call["parameters"]["formulary_name"]
            attribute = tool_call["parameters"]["attribute"]
            if os.getenv("LOCAL_MODE", "False").lower() == "true":
                results.append(query_local_json(formulary_name, attribute))
            else:
                results.append(query_opensearch(formulary_name, attribute))
    return results

@router.post("/ask")
async def ask_bot(request: QueryRequest):
    """ Processes AI response and executes `tool_calls` dynamically. """
    user_query = request.query
    ai_response = process_query(user_query)

    if isinstance(ai_response, dict) and "tool_calls" in ai_response:
        return {"results": execute_tool_calls(ai_response["tool_calls"])}

    return {"response": ai_response}

# ========================
# Directory: src/services/local_data.py
# ========================

import json
import os

LOCAL_JSON_FILE = "configs/local_data.json"

def query_local_json(formulary_name, attribute):
    """ Reads from local JSON file instead of OpenSearch in LOCAL_MODE. """
    try:
        with open(LOCAL_JSON_FILE, "r") as f:
            data = json.load(f)

        for entry in data.get("formulary_data", []):
            if entry.get("formulary_nme") == formulary_name:
                return {attribute: entry.get(attribute, "Attribute not found")}

        return {"message": "No data found in local JSON"}
    except Exception as e:
        return {"error": f"Failed to read local JSON: {str(e)}"}

# ========================
# Directory: configs/local_data.json
# ========================

{
  "formulary_data": [
    {
      "formulary_nme": "Omnipod",
      "total_wac": "400.0",
      "placement": "Preferred"
    },
    {
      "formulary_nme": "Humalog",
      "total_wac": "250.0",
      "placement": "Standard"
    }
  ]
}

# ========================
# Directory: requirements.txt
# ========================

fastapi==0.109.0
uvicorn==0.27.0
requests==2.31.0
langchain==0.1.15
langchain-community==0.0.27
opensearch-py==2.3.1
azure-ai-textanalytics==5.3.0
azure-openai==1.0.0
python-dotenv==1.0.1
redis==5.0.1
pytest==7.4.3
pyyaml==6.0.1
jsonschema==4.19.0

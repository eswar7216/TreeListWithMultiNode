
# Formulary Search AI - Updated to Query OpenSearch with Multiple Scenarios and Human-Readable Responses

# ========================
# Directory: src/services/opensearch.py
# ========================

import requests
import os
import logging

logger = logging.getLogger(__name__)

OPENSEARCH_URL = os.getenv("OPENSEARCH_URL", "http://localhost:9200/fps_um/_search")

def query_opensearch(tool_calls):
    results = []
    for tool_call in tool_calls:
        params = tool_call["parameters"]
        tool = tool_call["tool"]
        manufacturer_name = params.get("manufacturer_name")
        formulary_name = params.get("formulary_name")
        year = params.get("year")
        attribute = params.get("attribute")
        
        query_conditions = []
        
        if tool == "query_formulary_list_for_manufacturer":
            if manufacturer_name:
                query_conditions.append({"match": {"_source.super_mfr_nme": manufacturer_name}})
            query = {
                "size": 1000,  # Fetch up to 1000 records
                "query": {
                    "bool": {
                        "must": query_conditions
                    }
                }
            }
            logger.info(f"Querying OpenSearch for manufacturer formularies: {query}")
            response = requests.post(OPENSEARCH_URL, json=query)
            
            if response.status_code == 200:
                data = response.json()
                hits = data.get("hits", {}).get("hits", [])
                unique_formularies = set(hit["_source"].get("formulary_nme") for hit in hits if "formulary_nme" in hit["_source"])
                results.append({"formularies": list(unique_formularies)})
            else:
                logger.error(f"Error querying OpenSearch: {response.text}")
                results.append({"error": "Failed to fetch data from OpenSearch"})
        
        elif tool == "query_fps_placement":
            if formulary_name:
                query_conditions.append({"match": {"_source.formulary_nme": formulary_name}})
            if year:
                query_conditions.append({"match": {"_source.invoice_yr": str(year)}})
            query = {
                "query": {
                    "bool": {
                        "must": query_conditions
                    }
                }
            }
            logger.info(f"Querying OpenSearch for formulary placement: {query}")
            response = requests.post(OPENSEARCH_URL, json=query)
            
            if response.status_code == 200:
                data = response.json()
                hits = data.get("hits", {}).get("hits", [])
                if hits:
                    result = hits[0]["_source"].get("grid_cell_type", "Placement not found")
                    results.append({"placement": result})
                else:
                    results.append({"error": "No matching record found"})
            else:
                logger.error(f"Error querying OpenSearch: {response.text}")
                results.append({"error": "Failed to fetch data from OpenSearch"})
        
        elif tool == "query_formulary_um_rules":
            if formulary_name:
                query_conditions.append({"match": {"_source.formulary_nme": formulary_name}})
            if year:
                query_conditions.append({"match": {"_source.invoice_yr": str(year)}})
            query = {
                "query": {
                    "bool": {
                        "must": query_conditions
                    }
                }
            }
            logger.info(f"Querying OpenSearch for UM rules: {query}")
            response = requests.post(OPENSEARCH_URL, json=query)
            
            if response.status_code == 200:
                data = response.json()
                hits = data.get("hits", {}).get("hits", [])
                if hits:
                    result = hits[0]["_source"].get("um_rules", "UM rules not found")
                    results.append({"um_rules": result})
                else:
                    results.append({"error": "No matching record found"})
            else:
                logger.error(f"Error querying OpenSearch: {response.text}")
                results.append({"error": "Failed to fetch data from OpenSearch"})
    
    return results

prompts:
  initial_prompt: |
    You are an AI assistant that helps users retrieve formulary placement details, utilization management rules, and wholesale acquisition costs.
    You must always return responses in **valid JSON format** with **double quotes (`"`) only**.

    **Supported Queries:**
    1. "What are the formularies available for {manufacturer_name}?"  
       - Extract manufacturer name and return `mfr_nme`.
    2. "What is the placement of {formulary_name} in {year}?"  
       - Extract formulary name and year, return `grid_cell_type`.
    3. "What are UM rules of {formulary_name} in {year}?"  
       - Extract formulary name and year, return `um_rules`.
    4. "What is the wholesale acquisition cost for {formulary_name} in {year}?"  
       - Extract formulary name and year, return `total_wac`.

    **üö® IMPORTANT: JSON Formatting Rules**
    - **Always return responses as a valid JSON object.**
    - **Use double quotes (`"`) for all keys and values.**
    - **Ensure numeric values are unquoted (e.g., `"year": 2022`).**
    - **DO NOT return responses as Python dictionaries with single quotes (`'`).**
    - **DO NOT return natural language responses when JSON format is required.**

    **‚úÖ Correct JSON Response Format**
    ```json
    {
      "tool_calls": [
        {
          "tool": "query_formulary",
          "parameters": {
            "formulary_name": "{formulary_name}",
            "year": {year},
            "attribute": "{attribute}"
          }
        }
      ]
    }
    ```

    **‚ùå Incorrect Responses to Avoid**
    ```python
    {'tool_calls': [{'tool': 'query_formulary', 'parameters': {'formulary_name': 'Omnipod', 'year': '2022'}}]}
    ```

    If a question contains all required details, respond **directly in JSON format** without tool_calls.

---

### **‚úÖ Fix 2: Force AI Response to Be Parsed as JSON**
Modify **`process_query`** in `ai_gateway.py` to **force JSON parsing**.
```python
import json
import logging

logger = logging.getLogger(__name__)

def process_query(user_query, history):
    logger.info(f"Processing user query: {user_query} with conversation history.")

    messages = [{"role": msg["role"], "content": msg["content"]} for msg in history]
    messages.append({"role": "user", "content": user_query})

    ai_response = ai_gateway_call(messages)  # Replace with actual AI call

    logger.info(f"Received AI response: {ai_response}")

    # üîπ Force JSON format correction
    try:
        if isinstance(ai_response, str):
            ai_response = ai_response.strip()
            if ai_response.startswith("{") and ai_response.endswith("}"):
                parsed_response = json.loads(ai_response.replace("'", "\""))  # Convert single to double quotes
            else:
                parsed_response = json.loads(ai_response)
        else:
            parsed_response = ai_response

        if "tool_calls" in parsed_response:
            logger.info(f"Extracted tool_calls: {parsed_response['tool_calls']}")
            return parsed_response
    except json.JSONDecodeError as e:
        logger.error(f"JSON decoding failed: {str(e)} - AI Response: {ai_response}")

    return {"response": ai_response}  # Fallback to raw text

import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import HeaderIcons from './HeaderIcons';
import { userScreenSize } from '../../utils/screenSizeHelper';
import { MiniCartContainer } from '@t/t-cart-ui';
import ThemedLink from 't/ui-t/lib/Link';

// Mock the `userScreenSize` utility
jest.mock('../../utils/screenSizeHelper', () => ({
  userScreenSize: jest.fn(),
}));

// Mock other imports if necessary
jest.mock('@t/leaf-icons/lib/react/LeadIcon', () => () => <div>LeafIcon</div>);
jest.mock('!!raw-loader!t/leaf-icons/lib/icons/System/Regular/Id Card.svg', () => 'idCardSvg');
jest.mock('@t/t-cart-ui', () => ({ MiniCartContainer: () => <div>MiniCartContainer</div> }));
jest.mock('t/ui-t/lib/Link', () => ({ children }) => <div>{children}</div>);

describe('HeaderIcons', () => {
  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
  });

  it('should display ERS logo and ID Card link when isErsCobrand and idCardObj are provided', () => {
    userScreenSize.mockReturnValue(true); // Mock desktop view
    const idCardObj = { url: '/id-card', id: 'idCard' };

    render(<HeaderIcons
      isErsCobrand={true}
      isEsrxCobrand={false}
      idCardObj={idCardObj}
      showMiniCart={false}
      isEverNorthMigrationEnabled={false}
    />);

    expect(screen.getByAltText('ers-logo')).toBeInTheDocument();
    expect(screen.getByText('ID Card')).toBeInTheDocument();
    expect(screen.queryByText('MiniCartContainer')).not.toBeInTheDocument();
  });

  it('should apply correct tone based on screen size and props', () => {
    userScreenSize.mockReturnValue(true); // Mock desktop view

    render(<HeaderIcons
      isErsCobrand={false}
      isEsrxCobrand={true}
      idCardObj={{ url: '/id-card', id: 'idCard' }}
      showMiniCart={true}
      isEverNorthMigrationEnabled={true}
    />);

    // Verify tone based on screen size and props
    expect(screen.getByText('ID Card')).toHaveAttribute('tone', 'dark');
    expect(screen.getByText('MiniCartContainer')).toHaveAttribute('tone', 'dark');
  });

  it('should handle light tone correctly for non-desktop views', () => {
    userScreenSize.mockReturnValue(false); // Mock non-desktop view

    render(<HeaderIcons
      isErsCobrand={false}
      isEsrxCobrand={true}
      idCardObj={{ url: '/id-card', id: 'idCard' }}
      showMiniCart={true}
      isEverNorthMigrationEnabled={false}
    />);

    // Verify tone based on screen size and props
    expect(screen.getByText('ID Card')).toHaveAttribute('tone', 'dark');
    expect(screen.getByText('MiniCartContainer')).toHaveAttribute('tone', 'dark');
  });

  it('should handle exception cases without crashing', () => {
    userScreenSize.mockReturnValue(true); // Mock desktop view

    // Render with some props missing or invalid to test exception handling
    render(<HeaderIcons
      isErsCobrand={false}
      isEsrxCobrand={false}
      idCardObj={null}
      showMiniCart={false}
      isEverNorthMigrationEnabled={false}
    />);

    // Verify no errors and correct rendering
    expect(screen.queryByAltText('ers-logo')).not.toBeInTheDocument();
    expect(screen.queryByText('ID Card')).not.toBeInTheDocument();
    expect(screen.queryByText('MiniCartContainer')).not.toBeInTheDocument();
  });
});

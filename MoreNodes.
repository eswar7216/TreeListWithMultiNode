// src/cart/cart.service.ts   // Delegator; same name your controller injects
// Your controller keeps @inject(CartService) public cartService: CartService.
import { injectable, inject } from 'tsyringe';
import { AddToCartRequest, AddToCartResponse } from '../domain/models/request/addToCart.model';
import { GetCartResponse } from '../domain/models/getCart.model';
import { Channel } from './channel';
import { ChannelResolver } from './channel-resolver';
import { WebCartService } from './web-cart.service';
import { MobileCartService } from './mobile-cart.service';

export interface IChannelCartService {
  getCart(): Promise<GetCartResponse>;
  addItemsToCart(cartResourceId: string, req: AddToCartRequest): Promise<AddToCartResponse>;
}

@injectable()
export class CartService implements IChannelCartService {
  private readonly map: Map<Channel, IChannelCartService>;

  constructor(
    @inject('ChannelResolver') private readonly resolver: ChannelResolver,
    @inject(WebCartService) private readonly web: WebCartService,
    @inject(MobileCartService) private readonly mobile: MobileCartService,
  ) {
    this.map = new Map<Channel, IChannelCartService>([
      [Channel.WEB, this.web],
      [Channel.MOBILE, this.mobile],
    ]);
  }

  private pick(): IChannelCartService {
    const ch = this.resolver.current();
    return this.map.get(ch) ?? this.web;
  }

  public async getCart(): Promise<GetCartResponse> {
    return this.pick().getCart();
  }

  public async addItemsToCart(
    cartResourceId: string,
    addToCartRequest: AddToCartRequest
  ): Promise<AddToCartResponse> {
    return this.pick().addItemsToCart(cartResourceId, addToCartRequest);
  }
}

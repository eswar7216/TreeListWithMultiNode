import React, { useState } from "react";
import { Chat, User } from "@progress/kendo-react-conversational-ui";
import { Grid, GridColumn } from "@progress/kendo-react-grid";
import { Button } from "@progress/kendo-react-buttons";
import { Loader } from "@progress/kendo-react-indicators";
import { AiOutlineMessage, AiOutlineClose } from "react-icons/ai";
import { useStyles } from "./chat.styles";
import type { MessageProps } from "@progress/kendo-react-conversational-ui";

// ProseMirror imports
import { DOMParser, Schema, Node } from "prosemirror-model";
import { schema } from "prosemirror-schema-basic";
import { markdownParser } from "prosemirror-markdown";
import { EditorView } from "prosemirror-view";
import { EditorState } from "prosemirror-state";

interface ChatMessage {
  author: User;
  text: string;
  typingIndicator?: boolean;
}

interface CustomUser extends User {
  firstName: string;
}

// Mock user with first name
const user: CustomUser = { id: 1, name: "User", firstName: "John" };
const bot: User = { id: 2, name: "Formulary AI Bot" };

const initialMessages: ChatMessage[] = [
  { author: bot, text: "**Hello!** I am your AI assistant. ðŸ¤–" },
  { author: bot, text: "Ask me about **formulary details**, WAC amounts, and placement." },
  { author: bot, text: "- *Example:* What is the WAC for Drug X?\n- How does formulary placement work?" },
];

const ChatBot: React.FC = () => {
  const classes = useStyles();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [results, setResults] = useState<any[]>([]);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isTyping, setIsTyping] = useState<boolean>(false);

  const toggleChat = () => {
    setIsOpen(!isOpen);
    if (!isOpen && messages.length === 0) {
      setMessages(initialMessages);
    }
  };

  const sendMessage = async (event: any) => {
    const userMessage: ChatMessage = {
      author: user,
      text: `**${user.firstName}:** ${event.message.text}`, // Display user first name
    };
    setMessages((prev) => [...prev, userMessage]);

    setIsTyping(true);
    setMessages((prev) => [...prev, { author: bot, text: "", typingIndicator: true }]);

    try {
      const response = await fetch("http://localhost:8000/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: event.message.text }),
      });

      const data = await response.json();

      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);

      if (data.results) {
        setResults(data.results);
        setMessages((prev) => [...prev, { author: bot, text: "**Here are your search results:**" }]);
      } else if (data.response) {
        setMessages((prev) => [...prev, { author: bot, text: data.response }]);
      } else {
        setMessages((prev) => [...prev, { author: bot, text: "Sorry, I couldn't find that information." }]);
      }
    } catch (error) {
      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);
      setMessages((prev) => [...prev, { author: bot, text: "An error occurred. Please try again later." }]);
    }
  };

  // Function to render markdown using ProseMirror
  const renderMarkdown = (markdownText: string): Node => {
    return markdownParser.parse(markdownText);
  };

  // Custom renderer for messages using ProseMirror
  const customMessageRenderer = (props: MessageProps) => {
    const message = props.item as ChatMessage;

    if (message.typingIndicator) {
      return (
        <div className={classes.typingLoader}>
          <Loader size="small" type="pulsing" />
        </div>
      );
    }

    return (
      <div
        className={`${classes.messageBubble} ${
          message.author.id === user.id ? classes.userMessage : classes.botMessage
        }`}
      >
        {/* Render the formatted markdown usin

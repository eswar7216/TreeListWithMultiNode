// useScreenSize.test.js
import { renderHook } from '@testing-library/react-hooks';
import useScreenSize from './useScreenSize';

describe('useScreenSize', () => {
  it('should return true for tablet size and false for desktop size', () => {
    // Mock the matchMedia function
    window.matchMedia = jest.fn().mockImplementation(query => ({
      matches: query === '(max-width: 768px)', // Mock behavior for tablet
      addListener: jest.fn(),
      removeListener: jest.fn(),
    }));

    // Test for tablet size
    const { result } = renderHook(() => useScreenSize());
    expect(result.current).toBe(true);

    // Change the mock to simulate desktop size
    window.matchMedia = jest.fn().mockImplementation(query => ({
      matches: query === '(max-width: 768px)' ? false : true, // Mock behavior for desktop
      addListener: jest.fn(),
      removeListener: jest.fn(),
    }));

    // Trigger the resize event
    window.dispatchEvent(new Event('resize'));

    // Re-test for desktop size
    const { result: resultAfterResize } = renderHook(() => useScreenSize());
    expect(resultAfterResize.current).toBe(false);
  });
});

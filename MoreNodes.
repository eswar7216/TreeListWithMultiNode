import json
import requests
import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from opensearchpy import OpenSearch, RequestsHttpConnection
from mangum import Mangum

# Environment variables
LOCAL_MODE = os.getenv("LOCAL_MODE", "False").lower() == "true"
AI_GATEWAY_URL = os.getenv("AI_GATEWAY_URL", "https://your-ai-gateway/api/query")
OPENSEARCH_HOST = os.getenv("OPENSEARCH_HOST", "your-opensearch-endpoint")
OPENSEARCH_PORT = int(os.getenv("OPENSEARCH_PORT", 9200))
OPENSEARCH_INDEX = os.getenv("OPENSEARCH_INDEX", "fps_um")

# Local JSON file for testing
LOCAL_JSON_FILE = "local_data.json"

# Initialize FastAPI app
app = FastAPI()

# Initialize OpenSearch Client (if not in local mode)
if not LOCAL_MODE:
    client = OpenSearch(
        hosts=[{"host": OPENSEARCH_HOST, "port": OPENSEARCH_PORT}],
        http_auth=(os.getenv("OPENSEARCH_USER", "admin"), os.getenv("OPENSEARCH_PASSWORD", "admin")),
        use_ssl=True,
        verify_certs=True,
        connection_class=RequestsHttpConnection
    )

# Request model for API
class QueryRequest(BaseModel):
    query: str

def call_ai_gateway(user_query: str):
    """ Calls the AI Gateway to interpret the user query. """
    headers = {"Content-Type": "application/json"}
    payload = {"query": user_query}

    response = requests.post(AI_GATEWAY_URL, json=payload, headers=headers)
    
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": "AI Gateway failed", "status_code": response.status_code}

def query_local_json(formulary_name: str, attribute: str):
    """ Reads formulary data from a local JSON file in local mode. """
    try:
        with open(LOCAL_JSON_FILE, "r") as f:
            data = json.load(f)

        # Search for matching formulary
        for entry in data.get("formulary_data", []):
            if entry.get("formulary_nme") == formulary_name:
                return {attribute: entry.get(attribute, "Attribute not found")}

        return {"message": "No data found in local JSON"}
    
    except Exception as e:
        return {"error": f"Failed to read local JSON: {str(e)}"}

def query_opensearch(formulary_name: str, attribute: str):
    """ Queries OpenSearch for formulary data. """
    query = {
        "query": {
            "match": {
                "formulary_nme": formulary_name
            }
        }
    }

    response = client.search(index=OPENSEARCH_INDEX, body=query)

    if response["hits"]["total"]["value"] > 0:
        source = response["hits"]["hits"][0]["_source"]
        return {attribute: source.get(attribute, "Attribute not found")}
    
    return {"message": "No data found"}

@app.post("/ask")
async def ask_bot(request: QueryRequest):
    """ FastAPI endpoint to process formulary search queries. """
    try:
        user_query = request.query

        if not user_query:
            raise HTTPException(status_code=400, detail="Missing query parameter")

        # Step 1: Call AI Gateway
        ai_response = call_ai_gateway(user_query)

        if "error" in ai_response:
            raise HTTPException(status_code=500, detail=ai_response)

        formulary_name = ai_response.get("formulary_nme")
        attribute = ai_response.get("attribute")

        if not formulary_name or not attribute:
            raise HTTPException(status_code=400, detail="AI Gateway did not return expected data")

        # Step 2: Query data from either local JSON or OpenSearch
        if LOCAL_MODE:
            result = query_local_json(formulary_name, attribute)
        else:
            result = query_opensearch(formulary_name, attribute)

        return result

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# AWS Lambda Adapter
handler = Mangum(app)

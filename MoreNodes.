import React, { useState } from "react";
import { Chat, User } from "@progress/kendo-react-conversational-ui";
import { Grid, GridColumn } from "@progress/kendo-react-grid";
import { Button } from "@progress/kendo-react-buttons";
import { Loader } from "@progress/kendo-react-indicators";
import { AiOutlineMessage, AiOutlineClose } from "react-icons/ai";
import { useStyles } from "./chat.styles";
import type { MessageProps } from "@progress/kendo-react-conversational-ui";

interface ChatMessage {
  author: User;
  text: string;
  typingIndicator?: boolean;
}

const user: User = { id: 1, name: "User" };
const bot: User = { id: 2, name: "Formulary AI Bot" };

const initialMessages: ChatMessage[] = [
  { author: bot, text: "Hello! I am your AI agent for formulary assistance. ðŸ¤–" },
  { author: bot, text: "You can ask me about formulary details, WAC amounts, and placement." },
  { author: bot, text: "How can I assist you today?" },
];

const ChatBot: React.FC = () => {
  const classes = useStyles();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [results, setResults] = useState<any[]>([]);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isTyping, setIsTyping] = useState<boolean>(false);

  const toggleChat = () => {
    setIsOpen(!isOpen);

    if (!isOpen && messages.length === 0) {
      setMessages(initialMessages);
    }
  };

  const sendMessage = async (event: any) => {
    const userMessage: ChatMessage = { author: user, text: event.message.text };
    setMessages((prev) => [...prev, userMessage]);

    setIsTyping(true);
    setMessages((prev) => [...prev, { author: bot, text: "", typingIndicator: true }]);

    try {
      const response = await fetch("http://localhost:8000/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: event.message.text }),
      });

      const data = await response.json();

      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);

      if (data.results) {
        setResults(data.results);
        setMessages((prev) => [...prev, { author: bot, text: "Here are your search results:" }]);
      } else if (data.response) {
        setMessages((prev) => [...prev, { author: bot, text: formatResponse(data.response) }]);
      } else {
        setMessages((prev) => [...prev, { author: bot, text: "Sorry, I didn't understand your query." }]);
      }
    } catch (error) {
      setMessages((prev) => prev.filter((msg) => !msg.typingIndicator));
      setIsTyping(false);
      setMessages((prev) => [...prev, { author: bot, text: "An error occurred. Please try again later." }]);
    }
  };

  // Function to format response text
  const formatResponse = (text: string): string => {
    // If response contains a number, wrap it in <strong> for bold
    text = text.replace(/(\d+)/g, "<strong>$1</strong>");

    // Return the modified text
    return text;
  };

  // Custom renderer to safely display HTML in chat
  const customMessageRenderer = (props: MessageProps) => {
    const message = props.item as ChatMessage;

    if (message.typingIndicator) {
      return (
        <div className={classes.typingLoader}>
          <Loader size="small" type="pulsing" />
        </div>
      );
    }

    return (
      <div
        className={`${classes.messageBubble} ${
          message.author.id === user.id ? classes.userMessage : classes.botMessage
        }`}
        dangerouslySetInnerHTML={{ __html: message.text }} // Render formatted HTML safely
      />
    );
  };

  return (
    <div>
      {!isOpen && (
        <div className={classes.chatIcon} onClick={toggleChat}>
          <AiOutlineMessage size={32} />
        </div>
      )}

      {isOpen && (
        <div className={classes.chatContainer}>
          <div className={classes.chatHeader}>
            <span>Formulary AI Bot</span>
            <Button onClick={toggleChat} className={classes.closeButton}>
              <AiOutlineClose size={20} />
            </Button>
          </div>

          <Chat
            messages={messages}
            onMessageSend={sendMessage}
            user={user}
            placeholder="Ask about formulary..."
            messageTemplate={customMessageRenderer}
          />
        </div>
      )}
    </div>
  );
};

export default ChatBot;

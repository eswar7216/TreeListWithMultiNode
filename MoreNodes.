// src/cart/web-cart.service.ts
import { injectable, inject } from 'tsyringe';
import { Logger } from '@cigna/tsencore-core';
import { AddToCartRequest, AddToCartResponse } from '../domain/models/request/addToCart.model';
import { GetCartResponse } from '../domain/models/getCart.model';
import { CartAdapter } from '../adapters/cart.adapter';            // your actual path/type
import { MembershipAdapter } from '../adapters/membership.adapter'; // your actual path/type

@injectable()
export class WebCartService {
  constructor(
    @inject('Logger') private readonly logger: Logger,
    @inject('CartAdapter') private readonly cartAdapter: CartAdapter,
    @inject('MembershipAdapter') private readonly membershipAdapter: MembershipAdapter,
  ) {}

  public async getCart(): Promise<GetCartResponse> {
    this.logger.info('[WEB] Getting Cart');
    const { group, memberId, personNumber } = await this.getMembershipData();
    return this.cartAdapter.getCart(group, memberId, personNumber);
  }

  public async addItemsToCart(
    cartResourceId: string,
    addToCartRequest: AddToCartRequest
  ): Promise<AddToCartResponse> {
    this.logger.info('[WEB] Adding items', { cartResourceId, items: addToCartRequest?.items?.length });
    return this.cartAdapter.addItemsToCart({ cartResourceId, ...addToCartRequest });
  }

  private async getMembershipData() {
    const memberData = await this.membershipAdapter.getCurrentMemberData();
    // put your existing extraction here (copied from your current service)
    const personResourceId = memberData.sessionInfo.loginProfilePersonResourceId as string;
    const loggedPatient = memberData.membership?.patients?.find(
      (p: any) => p.personResourceId === personResourceId
    );
    return {
      group: loggedPatient?.group?.id as string,
      memberId: memberData.membership?.id as string,
      personNumber: loggedPatient?.personNumber as string,
    };
  }
}

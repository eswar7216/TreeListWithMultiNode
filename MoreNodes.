To build a **Webex bot** that uses an **LLM to derive user intent** (such as checking user status or resending activation emails), and then **prompts for confirmation** before executing an action, here's a clean breakdown:

---

### ðŸ§  Capabilities:

1. Use **LLM** (via your internal AI Gateway) to extract intent from user messages.
2. Check if intent is one of:

   * "check user active status"
   * "resend welcome email"
   * "check if user is account locked"
3. Prompt user for confirmation.
4. On confirmation, **perform action** (e.g., resend email).

---

### ðŸ—‚ Project Structure:

```
webex-bot/
â”‚
â”œâ”€â”€ main.py               # Entry point
â”œâ”€â”€ llm_utils.py          # Calls LLM and parses intent
â”œâ”€â”€ webex_handler.py      # Webhook processing
â”œâ”€â”€ actions.py            # Actual logic to perform actions
â””â”€â”€ state_store.py        # To temporarily hold confirmation state
```

---

### âœ… `main.py`

```python
from flask import Flask, request, jsonify
from webex_handler import handle_webhook

app = Flask(__name__)

@app.route('/webex', methods=['POST'])
def webhook():
    return handle_webhook(request.json)

if __name__ == '__main__':
    app.run(port=5000)
```

---

### ðŸ¤– `webex_handler.py`

```python
from llm_utils import get_intent
from actions import check_user_status, resend_email, is_user_locked
from state_store import store_confirmation, retrieve_confirmation
from webexteamssdk import WebexTeamsAPI

api = WebexTeamsAPI()

def send_message(person_id, text):
    api.messages.create(toPersonId=person_id, text=text)

def handle_webhook(payload):
    message_id = payload['data']['id']
    user_id = payload['data']['personId']
    msg = api.messages.get(message_id).text.strip()

    # Check if we are awaiting confirmation
    confirmation = retrieve_confirmation(user_id)
    if confirmation and msg.lower() in ['yes', 'y']:
        intent = confirmation['intent']
        target_user = confirmation['target_user']
        
        if intent == 'check_active':
            response = check_user_status(target_user)
        elif intent == 'resend_email':
            response = resend_email(target_user)
        elif intent == 'check_locked':
            response = is_user_locked(target_user)
        else:
            response = "Sorry, I don't recognize that action."

        send_message(user_id, response)
        return "Action confirmed", 200

    # Else, process normally
    intent, target_user = get_intent(msg)
    if intent:
        store_confirmation(user_id, intent, target_user)
        send_message(user_id, f"Do you want me to proceed with `{intent.replace('_', ' ')}` for user `{target_user}`? Reply YES to confirm.")
    else:
        send_message(user_id, "Sorry, I couldn't understand your request.")

    return "Processed", 200
```

---

### ðŸ§  `llm_utils.py`

Replace this with your AI Gateway call.

```python
def get_intent(message):
    """
    Example output from LLM:
    {
      "intent": "resend_email",
      "user": "sam123"
    }
    """
    # Simulated response
    if "resend" in message.lower():
        return "resend_email", extract_user(message)
    elif "active" in message.lower():
        return "check_active", extract_user(message)
    elif "locked" in message.lower():
        return "check_locked", extract_user(message)
    return None, None

def extract_user(message):
    # Simple logic to extract user ID (customize as needed)
    words = message.split()
    for word in words:
        if word.startswith("ee") or word.startswith("sam"):
            return word
    return "unknown_user"
```

---

### ðŸ”§ `actions.py`

```python
def check_user_status(user_id):
    # Replace with real system call
    return f"User {user_id} is ACTIVE."

def resend_email(user_id):
    # Replace with real system call
    return f"Welcome email sent to {user_id}."

def is_user_locked(user_id):
    # Replace with real system call
    return f"User {user_id} is NOT locked."
```

---

### ðŸ§  `state_store.py`

```python
# Simple in-memory store. Replace with Redis/DB for production.
confirmation_cache = {}

def store_confirmation(user_id, intent, target_user):
    confirmation_cache[user_id] = {
        'intent': intent,
        'target_user': target_user
    }

def retrieve_confirmation(user_id):
    return confirmation_cache.pop(user_id, None)
```

---

### ðŸ§ª Example Flow:

1. User: `Is user sam123 active?`
2. Bot (after LLM parsing): `Do you want me to proceed with "check active" for user sam123? Reply YES to confirm.`
3. User: `Yes`
4. Bot: `User sam123 is ACTIVE.`

---

Let me know if you'd like this wrapped in a zip, turned into a GitHub project, or integrated with your AI Gateway call format.






import requests
import json

AI_GATEWAY_URL = "https://your-ai-gateway.company.com/v1/completions"
API_KEY = "your_api_key_here"

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {API_KEY}"
}

# This can be a system prompt for consistent intent classification
SYSTEM_PROMPT = """
You are an assistant that extracts intent and target user from messages related to Webex support.
Supported intents:
- check_active
- resend_email
- check_locked

Respond in this format as JSON:
{
  "intent": "<intent_name>",
  "user": "<user_id>"
}
If the intent is not one of the above, respond with:
{
  "intent": null,
  "user": null
}
"""

def get_intent(user_message: str):
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ],
        "temperature": 0
    }

    try:
        response = requests.post(AI_GATEWAY_URL, headers=HEADERS, json=payload)
        response.raise_for_status()
        content = response.json()

        ai_response = content["choices"][0]["message"]["content"]
        result = json.loads(ai_response)
        return result.get("intent"), result.get("user")
    except Exception as e:
        print(f"Error calling AI Gateway: {e}")
        return None, None

